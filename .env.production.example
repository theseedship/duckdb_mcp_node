# Production Environment Configuration
# This profile is optimized for production deployment with stability and security

# DuckDB Configuration
DUCKDB_MEMORY=4GB
DUCKDB_THREADS=4

# MCP Server Configuration
MCP_SERVER_NAME=duckdb-mcp-native
MCP_SERVER_VERSION=0.7.2
MCP_MODE=stdio

# Security Configuration (strict for production)
MCP_SECURITY_MODE=production
MCP_MAX_QUERY_SIZE=1000000   # 1MB - conservative limit
MCP_QUERY_TIMEOUT=30000       # 30s - reasonable timeout

# Cache Configuration
MCP_CACHE_DIR=/var/cache/mcp-cache
MCP_CACHE_TTL=300000          # 5 minutes TTL
MCP_CACHE_SIZE=104857600      # 100MB cache

# Logging (production level)
LOG_LEVEL=info
LOG_FILE=/var/log/duckdb-mcp/app.log

# DuckPGQ Configuration - PRODUCTION PROFILE
# Conservative settings prioritizing stability

# Enable DuckPGQ (will gracefully fall back if unavailable)
ENABLE_DUCKPGQ=true

# Use community source (official DuckDB repository)
# This ensures you only get stable, tested releases
# Will auto-enable when DuckDB 1.4.x binaries are published
DUCKPGQ_SOURCE=community

# No custom repository in production (use official sources only)
DUCKPGQ_CUSTOM_REPO=

# No specific version (use latest stable)
DUCKPGQ_VERSION=

# Strict mode OFF in production (graceful degradation)
# Database continues to work without graph features if DuckPGQ unavailable
# IMPORTANT: Only set to true if graph features are critical to your application
DUCKPGQ_STRICT_MODE=false

# Required for community extensions
ALLOW_UNSIGNED_EXTENSIONS=true

# S3/MinIO Configuration (production endpoints)
# Use private endpoint for internal communication in production
MINIO_PUBLIC_ENDPOINT=https://s3.example.com:443
MINIO_PRIVATE_ENDPOINT=http://minio.internal:9000
MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}  # Use environment variable or secrets manager
MINIO_SECRET_KEY=${MINIO_SECRET_KEY}  # Use environment variable or secrets manager
MINIO_USE_SSL=true
MINIO_REGION=us-east-1
BUCKET_NAME=duckdb-data-prod

# Production Notes:
#
# 1. DuckPGQ in Production:
#    - DUCKPGQ_SOURCE=community ensures only stable releases
#    - Graceful degradation: app works without graph features if unavailable
#    - Will auto-enable when official DuckDB 1.4.x binaries are published
#
# 2. Current DuckDB 1.4.x Status:
#    - Official DuckPGQ binaries not yet available (as of 2025-10-20)
#    - Using community source will log info message and continue
#    - All non-graph database operations work normally
#    - See: https://github.com/cwida/duckpgq-extension/issues/276
#
# 3. Migration Path:
#    When DuckPGQ 1.4.x is released:
#    - No configuration changes needed
#    - Extension will auto-load on next deployment
#    - Monitor logs for successful loading message
#    - Run health checks: npm run test:duckpgq
#
# 4. If Graph Features Are Critical:
#    Only if your application REQUIRES graph features:
#    - Set DUCKPGQ_STRICT_MODE=true
#    - This will halt initialization if DuckPGQ unavailable
#    - Not recommended: reduces availability
#
# 5. Security Best Practices:
#    - Use secrets manager for MINIO_ACCESS_KEY and MINIO_SECRET_KEY
#    - Enable MINIO_USE_SSL=true in production
#    - Set appropriate LOG_FILE permissions
#    - Review MCP_SECURITY_MODE=production restrictions
#
# 6. Monitoring:
#    - Check logs for DuckPGQ loading status
#    - Monitor query performance and error rates
#    - Set up alerts for extension loading failures (if STRICT_MODE=true)
#
# 7. Rollback Plan:
#    If issues arise after DuckPGQ loads:
#    - Set ENABLE_DUCKPGQ=false to disable
#    - Redeploy
#    - Database continues to work for all non-graph queries
